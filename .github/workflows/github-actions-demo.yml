name: ci

on:
    pull_request:
        types: [reopened, opened, synchronize, ready_for_review, closed]

env:
    CICD_ODOO_OPTIONS: ${{ github.workspace }}/.cicd/conf/odoo.json
    ODOO_CUSTOM_ADDONS_PATH: .
    PIPELINE_SCRIPTS_PATH: ${{ github.workspace }}/.cicd/scripts
    PIPELINE_UTILS_SCRIPT_PATH: ${{ github.workspace }}/.cicd/scripts/utils.sh
    ODOO_IMAGE_TAG: xmars/odoo16-cicd
    ODOO_WORKSPACE: ${{ github.workspace }}/.cicd/odoo
    CONFIG_FILE: ${{ github.workspace }}/.cicd/odoo/etc/odoo.conf
    SOURCE_REQUIREMENTS_FILE: ${{ github.workspace }}/requirements.txt
    DOCKER_REQUIREMENTS_FILE: ${{ github.workspace }}/.cicd/odoo/dockerfile/requirements.txt
    ODOO_DOCKER_COMPOSE_PATH: ${{ github.workspace }}/.cicd/odoo
    ODOO_TEST_DATABASE_NAME: testing_db
    LOG_FILE: /var/log/odoo/odoo.log
    LOG_FILE_OUTSIDE: ${{ github.workspace }}/.cicd/odoo/logs/odoo.log
    ODOO_TMP_BACKUP_FOLDER: ${{ github.workspace }}/.cicd/.tmp/server-backup

    TELEGRAM_CHANNEL_ID: ${{ secrets.TELEGRAM_CHANNEL_ID }}
    TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
    PR_NUMBER: ${{ github.event.pull_request.number }}
    PR_URL: ${{ github.event.pull_request.html_url }}

    SERVER_HOST: ${{ vars.SERVER_HOST }}
    SERVER_USER: ${{ vars.SERVER_USER }}
    SERVER_PORT: ${{ vars.SERVER_PORT }}
    SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
    SERVER_PRIVATE_KEY: ${{ secrets.SERVER_PRIVATE_KEY }}

    SERVER_DEPLOY_PATH: ${{ vars.SERVER_DEPLOY_PATH }}
    SERVER_ODOO_URL: ${{ vars.SERVER_ODOO_URL }}
    SERVER_ODOO_DB_NAME: ${{ vars.SERVER_ODOO_DB_NAME }}
    SERVER_ODOO_IMAGE_TAG: ${{ vars.SERVER_ODOO_IMAGE_TAG }}

jobs:
    # TODO: integrate with Sonarqube
    # pylint-test:
    #     runs-on: ubuntu-latest
    #     steps:
    #         - name: Checkout
    #           uses: actions/checkout@v4
    #         - name: Prepare data for containers
    #           run: |
    #               bash $PIPELINE_SCRIPTS_PATH/build.sh "pylint"
    #         - uses: isbang/compose-action@v1.5.1
    #           with:
    #               compose-file: ${{ github.workspace }}/.cicd/odoo/docker-compose.yml
    #               up-flags: "--build --quiet-pull"
    #               down-flags: "--volumes"
    #         - name: Run Pylint Test cases
    #           run: |
    #               bash $PIPELINE_SCRIPTS_PATH/pylint-test.sh

    # unit-test-at-install:
    #     runs-on: ubuntu-latest
    #     steps:
    #         - name: Checkout
    #           uses: actions/checkout@v4
    #         - name: Prepare data for containers
    #           run: |
    #               bash $PIPELINE_SCRIPTS_PATH/build.sh "unit_test" "at_install"
    #               cat $CONFIG_FILE
    #         - uses: isbang/compose-action@v1.5.1
    #           with:
    #               compose-file: ${{ github.workspace }}/.cicd/odoo/docker-compose.yml
    #               up-flags: "--build --quiet-pull"
    #               down-flags: "--volumes"
    #         - name: Run Unit test cases
    #           run: |
    #               bash $PIPELINE_SCRIPTS_PATH/unit-test.sh

    # unit-test-post-install:
    #     runs-on: ubuntu-latest
    #     steps:
    # - name: Checkout
    #   uses: actions/checkout@v4
    # - name: Prepare data for containers
    #           run: |
    #               bash $PIPELINE_SCRIPTS_PATH/build.sh "unit_test" "post_install"
    #               cat $CONFIG_FILE
    #         - uses: isbang/compose-action@v1.5.1
    #           with:
    #               compose-file: ${{ github.workspace }}/.cicd/odoo/docker-compose.yml
    #               up-flags: "--build --quiet-pull"
    #               down-flags: "--volumes"
    #         - name: Run Unit test cases
    #           run: |
    #               bash $PIPELINE_SCRIPTS_PATH/unit-test.sh

    # TODO: integrationtest and deploy server
    integration-test:
        runs-on: ubuntu-latest
        env:
            SERVER_BACKUP_SCRIPT: /tmp/github/workspace/.cicd/scripts
            SERVER_DOCKER_COMPOSE_PATH: $SERVER_DEPLOY_PATH/
        #fixme: uncomment needs
        # if: github.event.action == 'closed' && github.event.pull_request.merged == true
        # needs: [pylint-test, unit-test-at-install, unit-test-post-install]
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: "Copy backup script file"
              uses: appleboy/scp-action@v0.1.4
              with:
                  host: ${{ env.SERVER_HOST }}
                  username: ${{ env.SERVER_USER }}
                  password: ${{ env.SERVER_PASSWORD }}
                  port: ${{ env.SERVER_PORT }}
                  source: ${{ env.PIPELINE_SCRIPTS_PATH }}/server-backup.sh
                  target: "/tmp"

            - name: "Integration test"
              uses: appleboy/ssh-action@v1.0.0
              with:
                  host: ${{ env.SERVER_HOST }}
                  username: ${{ env.SERVER_USER }}
                  password: ${{ env.SERVER_PASSWORD }}
                  port: ${{ env.SERVER_PORT }}
                  script: |
                      docker ps -a
                      ls -lah /tmp

    # deploy-server:
    #     runs-on: ubuntu-latest
    #     if: github.event.action == 'closed' && github.event.pull_request.merged == true
    #     needs: [integration-test]
    #     steps:
    #         - name: Use variables
    #           run: |
    #               echo "repository variable : $REPOSITORY_VAR"
    #               echo "organization variable : $ORGANIZATION_VAR"
    #               echo "overridden variable : $OVERRIDE_VAR"
    #               echo "variable from shell environment : $env_var"
    #           env:
    #               ab: 1
